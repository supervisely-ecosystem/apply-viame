# Ingest image list and detections pipeline via pytorch descriptors pipeline
#
# Runs a multi-node object tracking, descriptor generation, and indexing pipeline

# ============================== GLOBAL PROPERTIES =================================
# global pipeline config
#
config _pipeline:_edge
  :capacity                                    10

config _scheduler
  :type                                        pythread_per_process

# ================================== VIDEO INPUT ===================================

include common_default_input_with_downsampler.pipe

# =================================== DETECTOR =====================================

process detection_reader
  :: detected_object_input
  :file_name                                   [INSERT_ME]
  :reader:type                                 viame_csv

process detection_filter
  :: detected_object_filter
  :filter:type                                 class_probablity_filter

  block filter:class_probablity_filter
    # Filter parameters
    :threshold                                 0.005
    :keep_all_classes                          true
    :keep_classes                              ex1;ex2;not_used_unless_set
  endblock

process detector_writer
  :: detected_object_output

  # Type of file to output
  :file_name                                   [INSERT_ME]
  :writer:type                                 viame_csv

connect from downsampler.output_2
        to   detection_reader.image_file_name

connect from detection_reader.detected_object_set
        to   detection_filter.detected_object_set
connect from detection_filter.detected_object_set
        to   detector_writer.detected_object_set

# ================================= CORE TRACKER ===================================

include common_default_descriptor.pipe

connect from downsampler.output_1
        to   descriptor.image
connect from downsampler.timestamp
        to   descriptor.timestamp
connect from detection_filter.detected_object_set
        to   descriptor.detected_object_set

include common_default_initializer.pipe

connect from downsampler.output_1
        to   track_initializer.image
connect from downsampler.timestamp
        to   track_initializer.timestamp
connect from descriptor.detected_object_set
        to   track_initializer.detected_object_set

# ============================ ANALYZE AND INDEX DATA ==============================

process track_descriptor
 :: compute_track_descriptors
  :add_custom_uid                             true
  :uid_basename                               [INSERT_ME]
  :computer:type                              average

connect from downsampler.output_1
        to   track_descriptor.image
connect from downsampler.timestamp
        to   track_descriptor.timestamp
connect from track_initializer.object_track_set
        to   track_descriptor.object_track_set

process kwa_writer
  :: kw_archive_writer
  :output_directory                           [INSERT_ME]
  :base_filename                              [INSERT_ME]
  :separate_meta                              true
  :stream_id                                  [INSERT_ME]
  :compress_image                             true
  :static/gsd[ro]                             common:fixed_gsd
  :static/corner_points[ro]                   0 0 0 0 0 0 0 0

connect from downsampler.timestamp
        to   kwa_writer.timestamp
connect from downsampler.output_1
        to   kwa_writer.image

process track_writer
  :: write_object_track
  :file_name                                  [INSERT_ME]
  :writer:type                                viame_csv

connect from downsampler.timestamp
        to   track_writer.timestamp
connect from track_initializer.object_track_set
        to   track_writer.object_track_set

process track_writer_db
  :: write_object_track
  :file_name                                  none
  :writer:type                                db
  :writer:db:conn_str                         postgresql:host=localhost;user=postgres
  :writer:db:video_name                       [INSERT_ME]

connect from downsampler.timestamp
        to   track_writer_db.timestamp
connect from track_initializer.object_track_set
        to   track_writer_db.object_track_set

process descriptor_writer_db
  :: write_track_descriptor
  :file_name                                  none
  :writer:type                                db
  :writer:db:conn_str                         postgresql:host=localhost;user=postgres
  :writer:db:video_name                       [INSERT_ME]

connect from track_descriptor.track_descriptor_set
        to   descriptor_writer_db.track_descriptor_set

process smqtk_indexer
  :: smqtk_ingest_descriptors
  relativepath config_file =                  smqtk_postgres_ingest.json

connect from track_descriptor.descriptor_set
        to   smqtk_indexer.descriptor_set

connect from track_descriptor.string_vector
        to   smqtk_indexer.string_vector

# -- end of file --
